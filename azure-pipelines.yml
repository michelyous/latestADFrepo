stages:
- stage: Dev
  displayName: Dev
  jobs:
  - job: DeployADF
    displayName: Deploy ADF
    pool:
      vmImage: ubuntu-latest
    steps:
    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      inputs:
        terraformVersion: '1.1.0'
    - script: |
            az login
      displayName: 'Azure CLI Login'  
    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
        backendServiceArm: 'myserviceconnection'
        backendAzureRmResourceGroupName: 'myResourceGroup'
        backendAzureRmStorageAccountName: 'mystorageaccountmichel'
        backendAzureRmContainerName: 'mycontainer'
        backendAzureRmKey: $(TerraformBackendKey)
    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-cli.TerraformCLI@0
      inputs:
       provider: 'azurerm'
       command: 'apply'
       workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
       environmentServiceNameAzureRM: 'myserviceconnection'
       
- stage: QA
  displayName: QA
  jobs:
   - job: DeployADF
     displayName: Deploy ADF
     pool:
      vmImage: ubuntu-latest
     steps:
       - task: TerraformInstaller@0
         inputs:
           terraformVersion: '1.1.0'
       - task: TerraformCLI@0
         inputs:
           provider: 'azurerm'
           command: 'init'
           workingDirectory: '$(System.DefaultWorkingDirectory)/terraform'
           backendServiceArm: 





